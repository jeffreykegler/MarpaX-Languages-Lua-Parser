optional laststat
0
Number
exp
explist
=
level
Name
var
varlist
stat
stat item
)
"cr"
double quoted string
String
exp
hook
Name
var
exp
explist
optional explist
(
args
sethook
Name
.
debug
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional laststat
)
"\n"
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional laststat
)
"] "
double quoted string
String
exp
what
Name
.
t
Name
var
prefixexp
var
exp
" ["
double quoted string
String
exp
"(C)"
double quoted string
String
exp
or
keyword or
name
Name
.
t
Name
var
prefixexp
var
exp
exp
" "
double quoted string
String
exp
event
Name
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
else
keyword else
optional else block
optional laststat
)
">"
double quoted string
String
exp
short_src
Name
.
t
Name
var
prefixexp
var
exp
":"
double quoted string
String
exp
linedefined
Name
.
t
Name
var
prefixexp
var
exp
" <"
double quoted string
String
exp
"(Lua)"
double quoted string
String
exp
or
keyword or
name
Name
.
t
Name
var
prefixexp
var
exp
exp
" "
double quoted string
String
exp
event
Name
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
"Lua"
double quoted string
String
exp
==
what
Name
.
t
Name
var
prefixexp
var
exp
exp
elseif
keyword elseif
elseif block
elseif sequence
elseif sequence
optional laststat
end
keyword end
optional laststat
)
short_src
Name
.
t
Name
var
prefixexp
var
exp
"end "
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
else
keyword else
optional else block
elseif sequence
optional laststat
)
short_src
Name
.
t
Name
var
prefixexp
var
exp
"begin "
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
"call"
double quoted string
String
exp
==
event
Name
var
exp
exp
if
keyword if
stat
stat item
stat list
chunk
block
then
keyword then
"main"
double quoted string
String
exp
==
what
Name
.
t
Name
var
prefixexp
var
exp
exp
if
keyword if
stat
stat item
end
keyword end
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
0
Number
exp
explist
=
level
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
0
Number
exp
<
level
Name
var
exp
exp
if
keyword if
stat
stat item
1
Number
exp
-
level
Name
var
exp
exp
explist
=
level
Name
var
varlist
stat
stat item
stat list
chunk
block
else
keyword else
optional else block
elseif sequence
optional laststat
1
Number
exp
+
level
Name
var
exp
exp
explist
=
level
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
"call"
double quoted string
String
exp
==
event
Name
var
exp
exp
if
keyword if
stat
stat item
)
2
Number
exp
explist
optional explist
(
args
getinfo
Name
.
debug
Name
var
prefixexp
var
exp
exp
explist
=
t
Name
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
)
" "
double quoted string
String
exp
currentline
Name
.
t
Name
var
prefixexp
var
exp
":"
double quoted string
String
exp
short_src
Name
.
t
Name
var
prefixexp
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
0
Number
exp
>=
currentline
Name
.
t
Name
var
prefixexp
var
exp
exp
and
keyword and
nil
keyword nil
exp
~=
t
Name
var
exp
exp
exp
if
keyword if
stat
stat item
)
)
level
Name
var
exp
" "
double quoted string
String
exp
explist
optional explist
(
args
rep
Name
.
string
Name
var
prefixexp
var
exp
exp
" >>> "
double quoted string
String
exp
level
Name
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
)
3
Number
exp
explist
optional explist
(
args
getinfo
Name
.
debug
Name
var
prefixexp
var
exp
exp
explist
=
optional namelist initialization
t
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
event
Name
namelist
optional parlist
(
funcbody
hook
Name
function
keyword function
local
keyword local
stat
stat item
0
Number
exp
explist
=
optional namelist initialization
level
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
