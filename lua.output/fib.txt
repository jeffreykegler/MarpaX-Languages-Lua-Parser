optional laststat
)
fib
Name
var
exp
"cached"
double quoted string
String
exp
explist
optional explist
(
args
test
Name
var
prefixexp
functioncall
stat
stat item
)
fib
Name
var
exp
explist
optional explist
(
args
cache
Name
var
exp
exp
explist
=
fib
Name
var
varlist
stat
stat item
)
fib
Name
var
exp
"plain"
double quoted string
String
exp
explist
optional explist
(
args
test
Name
var
prefixexp
functioncall
stat
stat item
)
"evals"
double quoted string
String
exp
"time"
double quoted string
String
exp
"value"
double quoted string
String
exp
"n"
double quoted string
String
exp
""
double quoted string
String
exp
explist
optional explist
(
args
print
Name
var
prefixexp
functioncall
stat
stat item
)
n
Name
var
exp
explist
optional explist
(
args
tonumber
Name
var
exp
exp
explist
=
n
Name
var
varlist
stat
stat item
24
Number
exp
or
keyword or
]
1
Number
exp
[
arg
Name
var
prefixexp
var
exp
exp
explist
=
n
Name
var
varlist
stat
stat item
end
keyword end
optional laststat
)
N
Name
var
exp
t
Name
var
exp
v
Name
var
exp
n
Name
var
exp
s
Name
var
exp
explist
optional explist
(
args
print
Name
var
prefixexp
functioncall
stat
stat item
c
Name
var
exp
-
)
optional explist
(
args
clock
Name
.
os
Name
var
prefixexp
var
exp
exp
exp
explist
=
optional namelist initialization
t
Name
namelist
local
keyword local
stat
stat item
)
n
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
explist
=
optional namelist initialization
v
Name
namelist
local
keyword local
stat
stat item
)
optional explist
(
args
clock
Name
.
os
Name
var
prefixexp
var
exp
exp
explist
=
optional namelist initialization
c
Name
namelist
local
keyword local
stat
stat item
0
Number
exp
explist
=
N
Name
var
varlist
stat
stat item
stat list
chunk
block
)
f
Name
s
Name
namelist
optional parlist
(
funcbody
optional colon name element
test
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
end
keyword end
y
Name
var
exp
explist
optional explist
return
keyword return
laststat
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
y
Name
var
exp
explist
=
]
x
Name
var
exp
[
c
Name
var
prefixexp
var
varlist
stat
stat item
)
x
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
explist
=
y
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
y
Name
var
exp
not
keyword not
exp
if
keyword if
stat
stat item
]
x
Name
var
exp
[
c
Name
var
prefixexp
var
exp
explist
=
optional namelist initialization
y
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
x
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
explist
optional explist
return
keyword return
laststat
optional laststat
}
{
tableconstructor
exp
explist
=
optional namelist initialization
c
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
f
Name
namelist
optional parlist
(
funcbody
optional colon name element
cache
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
end
keyword end
)
2
Number
exp
-
n
Name
var
exp
exp
explist
optional explist
(
args
fib
Name
var
exp
exp
+
)
1
Number
exp
-
n
Name
var
exp
exp
explist
optional explist
(
args
fib
Name
var
exp
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
else
keyword else
optional else block
elseif sequence
n
Name
var
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
then
keyword then
2
Number
exp
<
n
Name
var
exp
exp
if
keyword if
stat
stat item
1
Number
exp
+
N
Name
var
exp
exp
explist
=
N
Name
var
varlist
stat
stat item
stat list
chunk
block
)
n
Name
namelist
optional parlist
(
funcbody
optional colon name element
fib
Name
dotted name
funcname
function
keyword function
stat
stat item
stat list
chunk
