optional laststat
end
keyword end
optional laststat
)
x
Name
var
exp
n
Name
var
exp
explist
optional explist
(
args
filter
Name
var
exp
exp
explist
=
x
Name
var
varlist
stat
stat item
)
n
Name
var
exp
explist
optional explist
(
args
print
Name
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional else block
elseif sequence
break
keyword break
laststat
optional laststat
stat list
chunk
block
then
keyword then
nil
keyword nil
exp
==
n
Name
var
exp
exp
if
keyword if
stat
stat item
)
optional explist
(
args
x
Name
var
exp
exp
explist
=
optional namelist initialization
n
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
do
keyword do
1
Number
exp
while
keyword while
stat
stat item
)
N
Name
var
exp
explist
optional explist
(
args
gen
Name
var
exp
exp
explist
=
x
Name
var
varlist
stat
stat item
1000
Number
exp
or
keyword or
N
Name
var
exp
exp
explist
=
N
Name
var
varlist
stat
stat item
end
keyword end
)
end
keyword end
optional laststat
end
keyword end
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
)
n
Name
var
exp
explist
optional explist
(
args
yield
Name
.
coroutine
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
0
Number
exp
~=
)
p
Name
var
exp
n
Name
var
exp
explist
optional explist
(
args
mod
Name
.
math
Name
var
prefixexp
var
exp
exp
exp
if
keyword if
stat
stat item
end
keyword end
optional else block
elseif sequence
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
then
keyword then
nil
keyword nil
exp
==
n
Name
var
exp
exp
if
keyword if
stat
stat item
)
optional explist
(
args
g
Name
var
exp
exp
explist
=
optional namelist initialization
n
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
do
keyword do
1
Number
exp
while
keyword while
stat
stat item
stat list
chunk
block
)
optional parlist
(
funcbody
function
keyword function
function
exp
explist
optional explist
(
args
wrap
Name
.
coroutine
Name
var
prefixexp
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
g
Name
p
Name
namelist
optional parlist
(
funcbody
optional colon name element
filter
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
)
end
keyword end
optional laststat
end
keyword end
optional laststat
)
i
Name
var
exp
explist
optional explist
(
args
yield
Name
.
coroutine
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
do
keyword do
n
Name
var
exp
,
2
Number
exp
=
i
Name
for
keyword for
stat
stat item
stat list
chunk
block
)
optional parlist
(
funcbody
function
keyword function
function
exp
explist
optional explist
(
args
wrap
Name
.
coroutine
Name
var
prefixexp
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
n
Name
namelist
optional parlist
(
funcbody
optional colon name element
gen
Name
dotted name
funcname
function
keyword function
stat
stat item
stat list
chunk
