optional laststat
)
x
Name
var
exp
explist
optional explist
(
args
testsorts
Name
var
prefixexp
functioncall
stat
stat item
}
"Dec"
double quoted string
String
exp
field
"Nov"
double quoted string
String
exp
field
"Oct"
double quoted string
String
exp
field
"Sep"
double quoted string
String
exp
field
"Aug"
double quoted string
String
exp
field
"Jul"
double quoted string
String
exp
field
"Jun"
double quoted string
String
exp
field
"May"
double quoted string
String
exp
field
"Apr"
double quoted string
String
exp
field
"Mar"
double quoted string
String
exp
field
"Feb"
double quoted string
String
exp
field
"Jan"
double quoted string
String
exp
field
fieldlist
{
tableconstructor
exp
explist
=
x
Name
var
varlist
stat
stat item
end
keyword end
optional laststat
)
x
Name
var
exp
"after quicksort again"
double quoted string
String
exp
explist
optional explist
(
args
show
Name
var
prefixexp
functioncall
stat
stat item
)
end
keyword end
y
Name
var
exp
<
x
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
y
Name
x
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
n
Name
var
exp
1
Number
exp
x
Name
var
exp
explist
optional explist
(
args
qsort
Name
var
prefixexp
functioncall
stat
stat item
)
x
Name
var
exp
"after reverse selection sort"
double quoted string
String
exp
explist
optional explist
(
args
show
Name
var
prefixexp
functioncall
stat
stat item
)
end
keyword end
y
Name
var
exp
>
x
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
y
Name
x
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
n
Name
var
exp
x
Name
var
exp
explist
optional explist
(
args
selectionsort
Name
var
prefixexp
functioncall
stat
stat item
)
x
Name
var
exp
"after quicksort"
double quoted string
String
exp
explist
optional explist
(
args
show
Name
var
prefixexp
functioncall
stat
stat item
)
end
keyword end
y
Name
var
exp
<
x
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
y
Name
x
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
n
Name
var
exp
1
Number
exp
x
Name
var
exp
explist
optional explist
(
args
qsort
Name
var
prefixexp
functioncall
stat
stat item
)
x
Name
var
exp
"original"
double quoted string
String
exp
explist
optional explist
(
args
show
Name
var
prefixexp
functioncall
stat
stat item
1
Number
exp
-
n
Name
var
exp
exp
explist
=
n
Name
var
varlist
stat
stat item
;
end
keyword end
optional laststat
1
Number
exp
+
n
Name
var
exp
exp
explist
=
n
Name
var
varlist
stat
stat item
stat list
chunk
block
do
keyword do
]
n
Name
var
exp
[
x
Name
var
prefixexp
var
exp
while
keyword while
stat
stat item
1
Number
exp
explist
=
optional namelist initialization
n
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
x
Name
namelist
optional parlist
(
funcbody
optional colon name element
testsorts
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
)
"\n"
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
)
","
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
if
keyword if
stat
stat item
1
Number
exp
+
i
Name
var
exp
exp
explist
=
i
Name
var
varlist
stat
stat item
)
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
do
keyword do
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
while
keyword while
stat
stat item
1
Number
exp
explist
=
optional namelist initialization
i
Name
namelist
local
keyword local
stat
stat item
)
"\n\t"
double quoted string
String
exp
m
Name
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
)
x
Name
m
Name
namelist
optional parlist
(
funcbody
optional colon name element
show
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
end
keyword end
optional laststat
1
Number
exp
+
i
Name
var
exp
exp
explist
=
i
Name
var
varlist
stat
stat item
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
=
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
varlist
stat
stat item
end
keyword end
optional laststat
1
Number
exp
+
j
Name
var
exp
exp
explist
=
j
Name
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
j
Name
var
exp
explist
=
m
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
)
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
exp
]
j
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
if
keyword if
stat
stat item
stat list
chunk
block
do
keyword do
n
Name
var
exp
<=
j
Name
var
exp
exp
while
keyword while
stat
stat item
1
Number
exp
+
i
Name
var
exp
exp
i
Name
var
exp
explist
=
optional namelist initialization
j
Name
m
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
do
keyword do
n
Name
var
exp
<=
i
Name
var
exp
exp
while
keyword while
stat
stat item
1
Number
exp
explist
=
optional namelist initialization
i
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
f
Name
n
Name
x
Name
namelist
optional parlist
(
funcbody
optional colon name element
selectionsort
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
)
f
Name
var
exp
u
Name
var
exp
1
Number
exp
+
m
Name
var
exp
exp
x
Name
var
exp
explist
optional explist
(
args
qsort
Name
var
prefixexp
functioncall
stat
stat item
)
f
Name
var
exp
1
Number
exp
-
m
Name
var
exp
exp
l
Name
var
exp
x
Name
var
exp
explist
optional explist
(
args
qsort
Name
var
prefixexp
functioncall
stat
stat item
]
l
Name
var
exp
[
x
Name
var
prefixexp
var
exp
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
=
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
]
l
Name
var
exp
[
x
Name
var
prefixexp
var
varlist
stat
stat item
end
keyword end
optional laststat
1
Number
exp
+
i
Name
var
exp
exp
explist
=
i
Name
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
exp
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
=
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
varlist
stat
stat item
1
Number
exp
+
m
Name
var
exp
exp
explist
=
m
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
)
t
Name
var
exp
]
i
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
if
keyword if
stat
stat item
stat list
chunk
block
do
keyword do
u
Name
var
exp
<=
i
Name
var
exp
exp
while
keyword while
stat
stat item
1
Number
exp
+
l
Name
var
exp
exp
explist
=
optional namelist initialization
i
Name
namelist
local
keyword local
stat
stat item
l
Name
var
exp
explist
=
m
Name
var
varlist
stat
stat item
]
l
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
=
optional namelist initialization
t
Name
namelist
local
keyword local
stat
stat item
]
l
Name
var
exp
[
x
Name
var
prefixexp
var
exp
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
exp
explist
=
]
m
Name
var
exp
[
x
Name
var
prefixexp
var
]
l
Name
var
exp
[
x
Name
var
prefixexp
var
varlist
stat
stat item
1
Number
exp
-
l
Name
var
exp
+
)
)
1
Number
exp
-
l
Name
var
exp
exp
(
exp
-
u
Name
var
exp
exp
explist
optional explist
(
args
random
Name
.
math
Name
var
prefixexp
var
exp
exp
exp
exp
explist
=
optional namelist initialization
m
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
then
keyword then
u
Name
var
exp
<
l
Name
var
exp
exp
if
keyword if
stat
stat item
stat list
chunk
block
)
f
Name
u
Name
l
Name
x
Name
namelist
optional parlist
(
funcbody
optional colon name element
qsort
Name
dotted name
funcname
function
keyword function
stat
stat item
stat list
chunk
