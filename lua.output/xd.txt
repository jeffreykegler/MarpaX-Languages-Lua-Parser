optional laststat
end
keyword end
optional laststat
16
Number
exp
+
offset
Name
var
exp
exp
explist
=
offset
Name
var
varlist
stat
stat item
)
"\n"
double quoted string
String
exp
)
"."
double quoted string
String
exp
"%c"
double quoted string
String
exp
s
Name
var
exp
explist
optional explist
(
args
gsub
Name
.
string
Name
var
prefixexp
var
exp
exp
" "
double quoted string
String
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
)
)
)
)
s
Name
var
exp
explist
optional explist
(
args
len
Name
.
string
Name
var
prefixexp
var
exp
exp
-
16
Number
exp
exp
(
exp
*
3
Number
exp
exp
" "
double quoted string
String
exp
explist
optional explist
(
args
rep
Name
.
string
Name
var
prefixexp
var
exp
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
)
end
keyword end
optional laststat
)
)
)
c
Name
var
exp
explist
optional explist
(
args
byte
Name
.
string
Name
var
prefixexp
var
exp
exp
"%02X "
double quoted string
String
exp
explist
optional explist
(
args
format
Name
.
string
Name
var
prefixexp
var
exp
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
)
c
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
"(.)"
double quoted string
String
exp
s
Name
var
exp
explist
optional explist
(
args
gsub
Name
.
string
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
)
)
offset
Name
var
exp
"%08X  "
double quoted string
String
exp
explist
optional explist
(
args
format
Name
.
string
Name
var
prefixexp
var
exp
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional else block
elseif sequence
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
then
keyword then
nil
keyword nil
exp
==
s
Name
var
exp
exp
if
keyword if
stat
stat item
)
16
Number
exp
explist
optional explist
(
args
read
Name
.
io
Name
var
prefixexp
var
exp
exp
explist
=
optional namelist initialization
s
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
do
keyword do
true
keyword true
exp
while
keyword while
stat
stat item
0
Number
exp
explist
=
optional namelist initialization
offset
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
