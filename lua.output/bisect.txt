optional laststat
)
2
Number
exp
1
Number
exp
f
Name
var
exp
explist
optional explist
(
args
solve
Name
var
prefixexp
functioncall
stat
stat item
end
keyword end
1
Number
exp
-
x
Name
var
exp
-
x
Name
var
exp
*
x
Name
var
exp
*
x
Name
var
exp
exp
exp
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
)
x
Name
namelist
optional parlist
(
funcbody
optional colon name element
f
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
)
)
)
z
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
e
Name
var
exp
z
Name
var
exp
n
Name
var
exp
"after %d steps, root is %.17g with error %.1e, f=%.1e\n"
double quoted string
String
exp
explist
optional explist
(
args
format
Name
.
string
Name
var
prefixexp
var
exp
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
)
)
b
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
)
a
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
b
Name
var
exp
a
Name
var
exp
f
Name
var
exp
explist
optional explist
(
args
bisect
Name
var
exp
exp
explist
=
optional namelist initialization
e
Name
z
Name
namelist
local
keyword local
stat
stat item
0
Number
exp
explist
=
n
Name
var
varlist
stat
stat item
stat list
chunk
block
)
b
Name
a
Name
f
Name
namelist
optional parlist
(
funcbody
optional colon name element
solve
Name
dotted name
funcname
function
keyword function
stat
stat item
end
keyword end
optional laststat
end
keyword end
)
fb
Name
var
exp
fc
Name
var
exp
b
Name
var
exp
c
Name
var
exp
f
Name
var
exp
explist
optional explist
(
args
bisect
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
else
keyword else
optional else block
elseif sequence
)
fc
Name
var
exp
fa
Name
var
exp
c
Name
var
exp
a
Name
var
exp
f
Name
var
exp
explist
optional explist
(
args
bisect
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
then
keyword then
0
Number
exp
<
fc
Name
var
exp
*
fa
Name
var
exp
exp
exp
if
keyword if
stat
stat item
)
c
Name
var
exp
explist
optional explist
(
args
f
Name
var
exp
exp
explist
=
optional namelist initialization
fc
Name
namelist
local
keyword local
stat
stat item
1
Number
exp
+
n
Name
var
exp
exp
explist
=
n
Name
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
a
Name
var
exp
-
b
Name
var
exp
exp
c
Name
var
exp
explist
optional explist
return
keyword return
laststat
optional laststat
stat list
chunk
block
then
keyword then
delta
Name
var
exp
<
)
b
Name
var
exp
-
a
Name
var
exp
exp
explist
optional explist
(
args
abs
Name
.
math
Name
var
prefixexp
var
exp
exp
exp
or
keyword or
b
Name
var
exp
==
c
Name
var
exp
exp
or
keyword or
a
Name
var
exp
==
c
Name
var
exp
exp
exp
exp
if
keyword if
stat
stat item
)
"\n"
double quoted string
String
exp
b
Name
var
exp
" b="
double quoted string
String
exp
a
Name
var
exp
" a="
double quoted string
String
exp
c
Name
var
exp
" c="
double quoted string
String
exp
n
Name
var
exp
explist
optional explist
(
args
write
Name
.
io
Name
var
prefixexp
var
prefixexp
functioncall
stat
stat item
2
Number
exp
/
)
b
Name
var
exp
+
a
Name
var
exp
exp
(
exp
exp
explist
=
optional namelist initialization
c
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
fb
Name
fa
Name
b
Name
a
Name
f
Name
namelist
optional parlist
(
funcbody
optional colon name element
bisect
Name
dotted name
funcname
function
keyword function
stat
stat item
1e-6
Number
exp
explist
=
delta
Name
var
varlist
stat
stat item
stat list
chunk
