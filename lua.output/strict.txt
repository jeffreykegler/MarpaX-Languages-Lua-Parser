optional laststat
end
keyword end
)
n
Name
var
exp
t
Name
var
exp
explist
optional explist
(
args
rawget
Name
var
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
end
keyword end
optional else block
elseif sequence
optional laststat
)
2
Number
exp
"' is not declared"
double quoted string
String
exp
..
n
Name
var
exp
exp
..
"variable '"
double quoted string
String
exp
exp
explist
optional explist
(
args
error
Name
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
"C"
double quoted string
String
exp
~=
)
optional explist
(
args
what
Name
var
exp
exp
exp
and
keyword and
]
n
Name
var
exp
[
__declared
Name
.
mt
Name
var
prefixexp
var
prefixexp
var
exp
not
keyword not
exp
exp
if
keyword if
stat
stat item
stat list
chunk
block
)
n
Name
t
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
explist
=
__index
Name
.
mt
Name
var
prefixexp
var
varlist
stat
stat item
end
keyword end
optional laststat
)
v
Name
var
exp
n
Name
var
exp
t
Name
var
exp
explist
optional explist
(
args
rawset
Name
var
prefixexp
functioncall
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
true
keyword true
exp
explist
=
]
n
Name
var
exp
[
__declared
Name
.
mt
Name
var
prefixexp
var
prefixexp
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
)
2
Number
exp
"'"
double quoted string
String
exp
..
n
Name
var
exp
exp
..
"assign to undeclared variable '"
double quoted string
String
exp
exp
explist
optional explist
(
args
error
Name
var
prefixexp
functioncall
stat
stat item
stat list
chunk
block
then
keyword then
"C"
double quoted string
String
exp
~=
w
Name
var
exp
exp
and
keyword and
"main"
double quoted string
String
exp
~=
w
Name
var
exp
exp
exp
if
keyword if
stat
stat item
)
optional explist
(
args
what
Name
var
exp
exp
explist
=
optional namelist initialization
w
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
then
keyword then
]
n
Name
var
exp
[
__declared
Name
.
mt
Name
var
prefixexp
var
prefixexp
var
exp
not
keyword not
exp
if
keyword if
stat
stat item
stat list
chunk
block
)
v
Name
n
Name
t
Name
namelist
optional parlist
(
funcbody
function
keyword function
function
exp
explist
=
__newindex
Name
.
mt
Name
var
prefixexp
var
varlist
stat
stat item
end
keyword end
"C"
double quoted string
String
exp
or
keyword or
what
Name
.
d
Name
var
prefixexp
var
exp
and
keyword and
d
Name
var
exp
exp
exp
explist
optional explist
return
keyword return
laststat
optional laststat
)
"S"
double quoted string
String
exp
3
Number
exp
explist
optional explist
(
args
getinfo
Name
var
exp
exp
explist
=
optional namelist initialization
d
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
block
)
optional parlist
(
funcbody
what
Name
function
keyword function
local
keyword local
stat
stat item
}
{
tableconstructor
exp
explist
=
__declared
Name
.
mt
Name
var
prefixexp
var
varlist
stat
stat item
end
keyword end
optional else block
elseif sequence
optional laststat
)
mt
Name
var
exp
_G
Name
var
exp
explist
optional explist
(
args
setmetatable
Name
var
prefixexp
functioncall
stat
stat item
}
{
tableconstructor
exp
explist
=
mt
Name
var
varlist
stat
stat item
stat list
chunk
block
then
keyword then
nil
keyword nil
exp
==
mt
Name
var
exp
exp
if
keyword if
stat
stat item
)
_G
Name
var
exp
explist
optional explist
(
args
getmetatable
Name
var
exp
exp
explist
=
optional namelist initialization
mt
Name
namelist
local
keyword local
stat
stat item
rawget
Name
var
exp
rawset
Name
var
exp
error
Name
var
exp
getinfo
Name
.
debug
Name
var
prefixexp
var
exp
explist
=
optional namelist initialization
rawget
Name
rawset
Name
error
Name
getinfo
Name
namelist
local
keyword local
stat
stat item
stat list
chunk
